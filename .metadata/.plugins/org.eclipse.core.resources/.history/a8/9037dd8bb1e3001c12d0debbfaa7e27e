#ifndef CONSTANTS_H_
#define CONSTANTS_H_

#define BLOCK2_PERIPH_BASE		(0x40000000UL)

#define AHB1_PERIPHERAL_OFFSET  (0x00020000UL)
#define AHB1_PERIPHERAL_BASE	(BLOCK2_PERIPH_BASE + AHB1_PERIPHERAL_OFFSET)

#define RCC_OFFSET				(0x3800UL)
#define RCC_BASE				(AHB1_PERIPHERAL_BASE + RCC_OFFSET)

#define GPIOA_OFFSET			(0x0000UL)
#define GPIOA_BASE				(AHB1_PERIPHERAL_BASE + GPIOA_OFFSET)
#define GPIOAEN_BIT				(1U << 0)	   // GPIOx enable bit

#define BIT_4                   (1U << 4)
#define BIT_5					(1U << 5)
#define BIT_6					(1U << 6)
#define BIT_7					(1U << 7)
#define BIT_8					(1U << 8)
#define BIT_9					(1U << 9)
#define BIT_10					(1U << 10)
#define BIT_11					(1U << 11)
#define BIT_12					(1U << 12)
#define BIT_13					(1U << 13)
#define BIT_14					(1U << 14)
#define BIT_15					(1U << 15)

#define LD2						BIT_5         // MCU's user led

// ------- --------- --------- --------- --------- --------- --------- --------
// ------ 1. Define the number of USART peripherals of the microcontroller.
// STM32F411CE_DATASHEET.PDF, Block Diagram.
// USART2 is hanging on APB1 bus.
// USART2 is connected to the USB through the debugger.
// RM0383-STM32F411XCE-REFERENCE-MANUAL.PDF
// ------ 2. Check the RCC APB1 clock enable register.
// 6.3.11. Bit 17 for USART2 EN.
#define USART2EN 				(1U << 17);
// ------ 3. Find out which GPIO pins the USART2 peripheral uses.
// STM32F411CE_DATASHEET.PDF, Table 9. Alternate function mapping.
// (PA2, AF07): Enable and configure PA2 to use USART2 TX.

// Table 10. STM32F411xC/xE register boundary addresses.
#define APB1_PERIPHERAL_BASE	BLOCK2_PERIPH_BASE
#define USART2_OFFSET			(0x4400UL)
#define USART2_BASE			    (APB1_PERIPHERAL_BASE + USART2_OFFSET)

// ------- --------- --------- --------- --------- --------- --------- --------
#define SYS_FREQ 				16000000	   // The default system frequency.

// In the clock tree, the system clock value is divided by a value to be used
// as the clock for APB bus. In the default state, the divider for the busses
// equals 1.
#define APB1_CLK  				SYS_FREQ       // The same as the system clock.
#define UART_BAUDRATE    		115200		   // A popular Baudrate.

// ------- --------- --------- --------- --------- --------- --------- --------
// RM0383-STM32F411XCE-REFERENCE-MANUAL.PDF
// 19.6.4 Control register 1 (USART_CR1).
#define CR1_TE					(1U << 3)      // Bit 3: TE: Transmitter enable.
#define CR1_RE					(1U << 2)      // Bit 13 UE: USART enable.

#define CR1_UE					(1U << 13)     // Bit 13 UE: USART enable.

// 19.6.1 USART_SR.
#define SR_TXE					(1U << 7)      // Transmit data register empty.
#define SR_RXNE					(1U << 5)      // Read data register not empty.

#define RCC 	((RCC_TypeDef *)  RCC_BASE)
#define GPIOA	((GPIO_TypeDef *) GPIOA_BASE)
#define USART2  ((USART_TypeDef *) USART2_BASE)

// ------- --------- --------- --------- --------- --------- --------- --------
// Define the GPIO peripheral as a structure and registers as its members.
// RM0383-STM32F411XCE-REFERENCE-MANUAL.PDF, 8.4 GPIO registers.
typedef struct
{
  __IO uint32_t MODER;    /*!< GPIO port mode register,                 Address offset: 0x00      */
  volatile uint32_t PLACEHOLDER[4];
  __IO uint32_t ODR;      /*!< GPIO port output data register,          Address offset: 0x14      */
  volatile uint32_t PLACEHOLDER2[2];
  __IO uint32_t AFR[2];   /*!< GPIO alternate function registers,     Address offset: 0x20-0x24 */
} GPIO_TypeDef;

// Define the Universal synchronous asynchronous receiver transmitter registers
// RM0383-STM32F411XCE-REFERENCE-MANUAL.PDF, 19.6 USART registers
typedef struct
{
  __IO uint32_t SR;         /*!< USART Status register,	                							Address offset: 0x00 */
  __IO uint32_t DR;         /*!< USART Data register,                    							Address offset: 0x04 */
  __IO uint32_t BRR;        /*!< USART Baud rate register,                							Address offset: 0x08 */
  __IO uint32_t CR1;        /*!< USART Control register 1,                							Address offset: 0x0C */
  __IO uint32_t CR2;        /*!< USART Control register 2,                							Address offset: 0x10 */
  __IO uint32_t CR3;        /*!< USART Control register 3,               							Address offset: 0x14 */
  __IO uint32_t GTPR;       /*!< USART Guard time and prescaler register, 							Address offset: 0x18 */
} USART_TypeDef;

// ------- --------- --------- --------- --------- --------- --------- --------
// Define the Reset and clock control (RCC) registers.
// RM0383-STM32F411XCE-REFERENCE-MANUAL.PDF, 6.3 RCC registers.
typedef struct
{
	volatile uint32_t PLACEHOLDER[12]; 															   // unused registers
  __IO uint32_t AHB1ENR;       /*!< RCC AHB1 peripheral clock register,                            Address offset: 0x30 */
  __IO uint32_t AHB2ENR;       /*!< RCC AHB2 peripheral clock register,                            Address offset: 0x34 */
  __IO uint32_t AHB3ENR;       /*!< RCC AHB3 peripheral clock register,                            Address offset: 0x38 */
  uint32_t      RESERVED2;     /*!< Reserved, 0x3C                                                                      */
  __IO uint32_t APB1ENR;       /*!< RCC APB1 peripheral clock enable register,                     Address offset: 0x40 */
} RCC_TypeDef;


#endif /* CONSTANTS_H_ */
